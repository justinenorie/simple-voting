// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  studentID String?  @unique
  firstName String?
  lastName  String?
  email     String   @unique
  password  String
  role      Role     @default(student)
  createdAt DateTime @default(now())
  Vote      Vote[]
}

model Vote {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String // Foreign key to User ID
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  createdAt   DateTime  @default(now())

  @@unique([userId, categoryId]) // Prevents duplicate votes per category
}

model Category {
  id         String      @id @default(uuid())
  name       String      @unique
  candidates Candidate[]
  votes      Vote[]
  createdAt  DateTime    @default(now())
}

model Candidate {
  id         String   @id @default(uuid())
  name       String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  votes      Vote[]
  createdAt  DateTime @default(now())
}

enum Role {
  student
  admin
}
